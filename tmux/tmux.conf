# =============================================================================
#                                      |     |
#               |  \/  (_) |             | |(_)
#               | .  . |_| | _____  ___  | |_ __ ___  _ __ ___
#               | |\/| | | |/ / _ \/ __| | || '_ ` _ \| '__/ __|
#               | |  | | |   <  __/\__ \ | || | | | | | | | | (__
#               \_|  |_/_|_|\_\___||___/ |_||_|_| |_| |_|_|  \___|)
# =============================================================================
#                       Settings from my computer :)
# =============================================================================
#
# Author:        Anderson Reis
#
# Editor:        Vim
#
# Terminal:      Kitty
#
# OS:            Debian (Gnu/Linux)
#
# Shell:         Zsh
#
# Description:   This is the personal tmux.conf file. I've tried to
#                document every option and item. Feel free to use it to learn
#                more about configuring Tmux.
#                Also, I encourage you to pick out the parts that you use and
#                understand rather than blindly using it.
#                You can find me on Github: http://github.com/areisrosa
#
# Sections:
#                -> Configurations
#                -> Bindings
#                -> Plugins
#
# ==============================================================================
# Configuration ------------------------------------------------------------ {{{
# ==============================================================================

# Ring the bell if any background window rang a bell
set -g bell-action any

# Change the default prefix
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# Keep your finger on ctrl, or don't
bind-key ^D detach-client

# Split in panes
# create splits and vertical splits
bind-key v split-window -h -p 50 -c "#{pane_current_path}"
bind-key ^V split-window -h -p 50 -c "#{pane_current_path}"

bind-key s split-window -p 50 -c "#{pane_current_path}"
bind-key ^S split-window -p 50 -c "#{pane_current_path}"

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal "screen-256color"

# Configure the tmux session to allow the terminal and nvim to display different cursors for different modes
# Allow xterm to scroll using Shift-[Arrow/Page Up/Down]. Note, this works best
# for tmux windows with only no splits.
set -as terminal-overrides ",*:indn@,*:U8=0"

# Linux System clipboard copy/paste
bind C-y run "tmux saveb - | xsel -i --clipboard"
bind C-p run "tmux set-buffer \"$(xsel -o)\"; tmux paste-buffer"

# Tmux use my default shell
set-option -g default-shell $SHELL

# Make Vim more responsive
set -sg escape-time 0  # Delay

# Fix ctrl + arrow to move between lines
set-window-option -g xterm-keys on

# Disable rename
set-option -g allow-rename off

# Count windows and panes from 1
set -g base-index 1
setw -g pane-base-index 1

# History Limit
set -g history-limit 1000

# Use vi key bindings in copy and choice modes, navigate using Vim or Emacs
# shortcuts, depending on the value of mode-keys. Emacs is the default, and if
# you want Vim shortcuts for helps and copy modes (e.g. j, k, C-u, C-d), add the
# following line to ~/.tmux.conf.
# Any command mentioned in this list can be executed as tmux something or C-a
# :something (or added to ~/.tmux.conf).
setw -g mode-keys vi

# Needed for CTRL-Left/Right to work.
setw -g xterm-keys on

# Auto re-order windows
# Renumber windows when one is closed.
set-option -g renumber-windows on

# Enable focus events. Needed for Vim FocusGained/FocusLost event handling.
set -g focus-events on

# Highlight window when it has new activity and do not ring a bell.
setw -g monitor-activity on
set -g visual-activity on

# Tmux-Continuum, automatic restore
set -g @continuum-restore 'on'
set -g @continuum-save-interval '60'

# Display CPU load average for the last 1,5 and 15 minutes, in the status bar
set -g status-right "#(cut -d ' ' -f -3 /proc/loadavg) %H:%M %d-%b-%y"

# Tmux-navigator configuration
set -g @plugin 'christoomey/vim-tmux-navigator'

# Enable airline/tmuxline status bar during star of tmux
if-shell "[ -f ~/.tmux-statusline-colors.conf ]" 'source ~/.tmux-statusline-colors.conf'

# Local config
if-shell "[ -f ~/.tmux.conf.user ]" 'source ~/.tmux.conf.user'

# =============================================================================
# Bindings ---------------------------------------------------------------- {{{
# =============================================================================

# Usage, at command line:
# use Vim style commands for copy and paste. See "Usage, copy and paste" above.
unbind [
bind -n M-Escape copy-mode
unbind p
bind -n M-p paste-buffer
bind -Tcopy-mode-vi v send -X begin-selection
# Copy tmux selection to system clipboard. Different mechanisms are needed for
# linux and Mac. Allow both Enter and 'y' (for yank) to signify end selection.
if-shell 'case "$OS" in *Linux*) true;; *) false;; esac' \
    'bind -Tcopy-mode-vi Enter send -X copy-pipe-and-cancel "xclip -selection primary -i -f | xclip -selection clipboard -i"' \
    'bind -Tcopy-mode-vi Enter send -X copy-pipe-and-cancel  "reattach-to-user-namespace pbcopy"'
if-shell 'case "$OS" in *Linux*) true;; *) false;; esac' \
    'bind -Tcopy-mode-vi y send -X copy-pipe-and-cancel "xclip -selection primary -i -f | xclip -selection clipboard -i"' \
    'bind -Tcopy-mode-vi y send -X copy-pipe-and-cancel  "reattach-to-user-namespace pbcopy"'

# Bindings for the mouse
bind m \
    set -g mouse on \; \
    display 'Mouse: ON'
# Allow mouse interaction
# set -g mouse on
bind M \
    set -g mouse off \; \
    display 'Mouse: OFF'

# Force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf"

# Kill session
bind x kill-pane
bind X kill-session

# Restoring Clear Screen (C-l)
bind C-l send-keys 'C-l'

# Select the window at target-window. -l, -n and -p are equivalent to the
# last-window, next-window and previous-window commands. If -T is given and the
# selected window is already the current window, the command behaves like
# last-window, screen like binding for last window will be now:
unbind l
bind C-a last-window

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to shift-ctrl-<h,j,k,l> in iTerm.
bind -r H resize-pane -L 15
bind -r J resize-pane -D 15
bind -r K resize-pane -U 15
bind -r L resize-pane -R 15

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Move panes around the current window. Use Prefix-q to list pane numbers.
bind up swap-pane -D
bind down swap-pane -U

# New windows/pane in $PWD
bind c new-window -c "#{pane_current_path}"

# Rename the current window.
bind a command-prompt "rename-window %%"

# Synchronize all panes in the current window.
bind y setw synchronize-panes

# Easily toggle synchronization (mnemonic: e is for echo),
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# =============================================================================
# Plugins ----------------------------------------------------------------- {{{
# =============================================================================

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'wfxr/tmux-fzf-url'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'Morantron/tmux-fingers'

# These features enable uninterrupted tmux usage
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# FZF configuration to Tmux
unbind u
set -g @fzf-url-bind 'u'

# Fingers configuration to Tmux
set -g @fingers-key F
set -g @fingers-pattern-0 'git rebase --(abort|continue)'

# Installing plugins with tpm to add new plugin to ~/.tmux.conf
# with set -g @plugin '...' press Prefix + I (capital i, as in Install)
# to fetch the plugin.
if "test ! -d ~/.tmux/plugins/tpm" \
    "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Refreshes TMUX environment
# press Prefix + I

# Updates plugin(s)
# press Prefix + U

# Remove/Uninstall plugins not on the plugin list
# pess Prefix + alt + u

# Initialize TMUX plugin manager,
# keep this line at the very bottom of tmux.conf.
run -b '~/.tmux/plugins/tpm/tpm'

# For more informations visit: https://github.com/tmux-plugins/tpm
